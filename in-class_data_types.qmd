---
title: "Data Types In Class Activity"
author: "Kt Nowak"
format: 
  html:
    code-tools: true
    toc: false
    exec: true
    echo: true
---

## Overview & Objective

This is the first foray into how to actually use `R` and focuses on understanding some of the most basic data types.

## Student Learning Objectives

At the end of this topic, you should be able to:  

 - Describe characteristics of numeric, character, logical, and date data types.  
 - Use introspection and coercion for basic data types. 
 - Perform operations on included data types.  


## Activity

The following markdown has a set of questions followed by a chunk for you to put in code to answer the question.  Fill them all out as indicated.


### Numeric Data

What is your favorite number

```{r}

17

```


The ancient Egyptians were quite cleaver at engineering and building things.  The [Rhind Papyrus](https://en.wikipedia.org/wiki/Rhind_Mathematical_Papyrus), which dates to 1650 BCE, indicates that they estimated the ratio between the circumfrence and the diameter of a circle to be 256 divided by 81.  Mathematically is this more or less than what we estimate $\pi$ as?  What is the magnitude of the difference?

The number estimated by the Rhind Papyrus is 3.160494. This number is greater than $\pi$ by a magnitude of 0.018994.  

```{r}

256/81

3.160494-3.1415

```



The function `sqrt()` provides you the square root of a number. Assign a variable named `root2` to hold the value of `sqrt(2)`.

```{r}

root2 <- sqrt(2)

root2

```


What is the value contained in the variable below named `sqrOfNegative2`?  Explain the result and make any modifications necessary to be more explicit.

The value define for the variable below is -4 

```{r}

sqrOfNegative2 <- (-2^2)

sqrOfNegative2

realsqrofNegative2 <- 1.41i

realsqrofNegative2

```



### Character Data

Create variables for your first and last names (and give them proper variable names).

```{r}

firstname <- 'KT'

lastname <- 'Nowak'

firstname

lastname

```


Use the functions `print()` and `cat()` to display these values.  Are these two functions identical?

These functions are not identical. Cat "outputs the objects, concatenating the representations. cat performs much less conversion than print". Print " prints its argument and returns it invisibly".

```{r}

print(firstname)
print(lastname)

cat(firstname)
cat(lastname)

```


Create a new variable, `properName`, which is your last name, a commma and space, followed by your first name.  Use the variables above instead of writing out the letters for your names.

```{r}

properName <- paste((firstname),(lastname))

cat(properName)

```


The function `nchar()` returns the number of characters in a character variable.  Use it on your `properName`.

```{r}

nchar(properName)

```


### Logical Data 

Create the variables `trueResult` and `falseResult` and assign them the proper logical values for R.

```{r}

trueResult <- TRUE

flaseResut <- FALSE


```


Using the variables `trueResult` and `falseResult` demonstrate logical operators for equality, inequality, and negation.

```{r}
#equality
'trueResult' == 'falseResult'

#inequality
'trueResult' != 'falseResult'


#negation
!trueResult

!(!trueResult)


```


Using the variables `trueResult` and `falseResult` demonstrate AND operator in R for all pairwise combinations (e.g, for the and operator, show how to evaluate `trueResult` and `trueResult`, `trueResult` and `falseResult`, `falseResult` and `trueResult`, and `falseResult` and `falseResult`)

```{r}

trueResult & trueResult

```

Do the same as the previous question for the approriate OR operator.

```{r}
trueResult | trueResult

```


In the example above for the square root, the variable `root2` has the square root of the number $2$.  Test the equality (e.g., use the `==` operator) of this varible times itself to the value $2$. Discuss this with your neighbor.  Does this make sense?

```{r}

root2
sqrt(2)^2

```



### Dates


When did you first become a college student?  Create a variable representing this date.

```{r}

library(lubridate)


mdy('07-20-2018') -> start_date

```


How many days was it between then and now?

```{r}

today() - start_date


```


